// Проаналізуйте і поясніть, що відбувається в кожному випадку, та який результат буде виведено в консоль.

// Приклад 1:
// console.log(a)
// var a = 10

// Відповідь: undefined
/* Тому що змінні, оголошені за допомогою var "піднімаються" на верхній рівень свого контексту (функції або глобального контексту)
   та позначаються undefined (значення не було присвоєно).
   a ще не було присвоєно на момент виклику console.log. */

// *************************************************************
// Приклад 2:
// myFunction();

// function myFunction() {
//     console.log('Hello, world!');
//  }

// Відповідь: 'Hello, world!'
/* Тому що function declaration також піднімаються як і var, у своєму контексті перед виконанням самої функції.
   Та код все одно буде виконуватися коректно */

// *************************************************************
// Приклад 3:
// console.log(b);
// let b = 5;

// Відповідь: Reference error
/* Коли змінна оголошується зі словом “let”, вона попадає до "temporal dead zone".
   Це означає, що ми не можемо використовувати цю змінну до її фактичного оголошення
 */

// ***********************************************************
// Приклад 4:
// const myArrowFunction = () => {
//   console.log('Hello from arrow function');
// }
//
// myArrowFunction();

// Відповідь: 'Hello from arrow function'
/* myArrowFunction - це змінна, якій присвоєно значення стрілкової функції.
   виклик myArrowFunction() робиться після об'явлення функції,
   щоб уникнути помилки при виклику функції до її об'явлення. */

// Напишіть власні приклади коду, де:

// В одному випадку hoisting призводить до успішного виконання коду.

// const x = 20
// const y = 10
//
// const result = add(x, y)
// console.log(result) // 30
//
// function add(a, b) {
//   return a + b
// }

// Пояснення: function declaration", піднімається вгору (hoisted),
// тобто її можна викликати перед її фактичним визначенням.

// В іншому випадку hoisting призводить до помилки. Поясніть, чому сталася помилка.

// const a = 20
// const b = 10
//
// const res = add(a, b)
// console.log(res) // Uncaught ReferenceError: add is not defined
//
// const add = function (x, y) {
//   return x + y
// }

// при спробі викликати функцію add в рядку const result = add(a, b) відображається помилка "Uncaught ReferenceError: add is not defined".
// Причина цього полягає в тому, що вона не буде доступна доти, доки код не дійде до місця їх фактичного оголошення.
